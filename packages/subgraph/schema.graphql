# Types

# Executions

type Action @entity {
  id: ID!
  to: Bytes!
  value: BigInt!
  data: Bytes!
  dao: Dao!
  proposal: IProposal!
  execResult: Bytes
}

# Dao

type Dao @entity {
  id: ID! # use address as id
  actions: [Action!]! @derivedFrom(field: "dao")
  proposals: [IProposal!]! @derivedFrom(field: "dao")
  plugins: [Plugin!]! @derivedFrom(field: "dao")
}

# Plugins

type PluginSetup @entity(immutable: true) {
  id: ID! # contract address
  versions: [PluginVersion!]! @derivedFrom(field: "pluginSetup")
}

type PluginRelease @entity {
  id: ID! # pluginRepo + release
  release: Int!
  metadata: String! # release metadata
  builds: [PluginVersion!]! @derivedFrom(field: "release")
}

type PluginVersion @entity(immutable: true) {
  id: ID! # pluginRepo + release + build
  pluginSetup: PluginSetup

  release: PluginRelease!
  build: Int!

  metadata: String! # build metadata
}

enum PermissionOperation {
  Grant
  Revoke
  GrantWithCondition
}

enum PluginPreparationType {
  Installation
  Update
}

type PluginPreparation @entity(immutable: true) {
  id: ID! # psp setupId + installationId
  installation: PluginInstallation!
  permissions: [String!]!
  type: PluginPreparationType!
}

enum PluginPreparationState {
  InstallationPrepared
  Installed
  UpdatePrepared
  UninstallPrepared
  Uninstalled
}

interface PluginInstallation @entity {
  id: ID! # psp installationId
  dao: Dao!
  pluginAddress: Bytes!

  preparations: [PluginPreparation!]! @derivedFrom(field: "installation")
  state: PluginPreparationState!
}

# Plugin

type Plugin implements PluginInstallation @entity {
  "OSX related data"
  id: ID! # psp installationId
  dao: Dao!
  pluginAddress: Bytes!

  preparations: [PluginPreparation!]! @derivedFrom(field: "installation")
  state: PluginPreparationState!

  "Plugin specific related data"
  proposalCount: BigInt
  proposals: [PluginProposal!]! @derivedFrom(field: "plugin")
  members: [PluginMember!]! @derivedFrom(field: "plugin")
  minApprovals: Int
  onlyListed: Boolean
}

type PluginMember @entity {
  id: ID! # plugin_address + member_address
  address: String # address as string to facilitate filtering by address on the UI
  proposals: [PluginProposalMember!]! @derivedFrom(field: "approver")
  plugin: Plugin!
}

type PluginProposalMember @entity(immutable: true) {
  "MemberProposal for Many-to-Many"
  id: ID! # approver + proposal
  approver: PluginMember!
  proposal: PluginProposal!
  createdAt: BigInt!
}

# Proposal
interface IProposal {
  id: ID! # package + proposalId
  dao: Dao!
  creator: Bytes!
  metadata: String
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  failureMap: BigInt
  executed: Boolean!
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  executionTxHash: Bytes
}

type PluginProposal implements IProposal @entity {
  id: ID! # plugin + proposalId
  dao: Dao!
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  failureMap: BigInt
  plugin: Plugin!
  pluginProposalId: BigInt!
  creator: Bytes!
  metadata: String
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  creationBlockNumber: BigInt!
  snapshotBlock: BigInt!
  minApprovals: Int!
  approvals: Int
  potentiallyExecutable: Boolean!
  executed: Boolean!
  executionDate: BigInt
  executionBlockNumber: BigInt
  executionTxHash: Bytes
  approvers: [PluginProposalMember!]! @derivedFrom(field: "proposal")
}
